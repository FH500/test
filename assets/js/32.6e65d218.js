(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{344:function(t,s,a){t.exports=a.p+"assets/img/1.5d8ffe85.png"},407:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"输入输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入输出"}},[t._v("#")]),t._v(" 输入输出")]),t._v(" "),s("p",[t._v("输入输出（I/O）这个概念你应该听过很多次了，但是，到底啥是输入输出呢？你可以把我们的程序看成是一个黑盒子，盒子上有一个口，我们可以在纸上写一些字，然后扔进盒子里，那么这个过程就是输入。盒子收到我们的纸条并进行处理后，又从里面扔出另一张纸，那么这个过程就是输出。当然我们不一定就用纸这样传统的交流方式，更现代化一点，盒子上有键盘，你可以通过打字来输入，同时还有屏幕，其会随着你的操作而发生变化，输出不同的内容，没错，这就是电脑。")]),t._v(" "),s("p",[t._v("输入和输出不总是具体的数据，但我们可以将其抽象成由 "),s("code",[t._v("0，1")]),t._v(" 组成的数据。想象一下电脑处理键盘输入的过程，假如我们按下 "),s("code",[t._v("A")]),t._v(" 键，键盘会将这个动作处理成一个数字信号，假定是数字 "),s("code",[t._v("0")]),t._v("，然后发生给电脑。那么电脑收到 "),s("code",[t._v("0")]),t._v(" 这个信号时，就理解了我们按下了 "),s("code",[t._v("A")]),t._v(" 键。因此，有些时候你可以欺骗电脑，通过一些程序来向电脑发送 "),s("code",[t._v("0")]),t._v(" 这个信号。这时，尽管你并没有真正按下 "),s("code",[t._v("A")]),t._v(" 键，但电脑还是认为你按了 "),s("code",[t._v("A")]),t._v(" 键，并作出相关的反应和输出。这就是鼠标宏和键盘宏的原理。")]),t._v(" "),s("p",[t._v("回到我们的 C/C++ 程序中，我们的输入和输出被大大简化了。输入可以看成是一个文本（字符串），我们的程序根据这个文本进行相关处理，又输出另一个文本。处理输入输出就相当于处理文本。")]),t._v(" "),s("p",[t._v("假如我们有一个文本（字符串） "),s("code",[t._v("1100")]),t._v("，那么根据 "),s("a",{attrs:{href:""}},[t._v("ASCII 码")]),t._v("，这段文本可以被转化为二进制数字序列 "),s("code",[t._v("00110001 00110001 00110000 00110000")]),t._v("，用十六进制可以简短地表示为 "),s("code",[t._v("31 31 30 30")]),t._v("。那么，假如我们直接把这个文本对应的原始二进制数存储到内存中，总共需要 4 个字节的空间，并且，其可以表示一个 int 型的变量，其值为 "),s("code",[t._v("825307184")]),t._v("。也就是说，对于一个 4 字节的数 "),s("code",[t._v("00110001 00110001 00110000 00110000")]),t._v("，如果你把它拆分成单独的 4 个字符，其可以表示字符串 "),s("code",[t._v("1100")]),t._v("；如果你直接把它看作一个 4 字节的整数，那么它就是数字 "),s("code",[t._v("825307184")]),t._v("。这里我想强调的是解释数据的方法不同，得到的结果也不一样。")]),t._v(" "),s("p",[t._v("那么，计算机怎么知道如何将输入处理成我们想要的结果呢？答案就是通过变量的类型来决定。如果使用 "),s("code",[t._v("cin")]),t._v(" 将 "),s("code",[t._v("1100")]),t._v(" 输入到一个 int 型的变量中，我们得到的是一个值为 "),s("code",[t._v("1100")]),t._v(" 的变量，对应的十六进制数为 "),s("code",[t._v("44C")]),t._v("。显然，输入的时候，计算机不是简单地将字符串 "),s("code",[t._v("1100")]),t._v(" 对应的原始数据（十六进制表示，为简洁表示，我们后面表示二进制数时常会采用十六进制数） "),s("code",[t._v("31 31 30 30")]),t._v(" 复制到我们的内存上。在读取输入的时候，计算机对这段数据进行了一些处理，转换成了 int 型对应值为 "),s("code",[t._v("1100")]),t._v(" （内存上为 "),s("code",[t._v("00 00 04 4C")]),t._v("）的变量。")]),t._v(" "),s("h2",{attrs:{id:"使用-cin-输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-cin-输入"}},[t._v("#")]),t._v(" 使用 cin 输入")]),t._v(" "),s("p",[t._v("尽管我们到现在才正式介绍 "),s("code",[t._v("cin")]),t._v("，但你应该已经使用过它很多次了。一般而言，使用下面的语句来进行输入。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("此外，你还可以连续使用 "),s("code",[t._v(">>")]),t._v(" 运算符来输入多个数据，如下。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("cin")]),t._v(" 在读入数据时有一个特点，就是会忽略所有的空白字符，包括空格、换行符、制表符，因此，即便你的数据前面跟着一些空格、换行符和制表符也没关系，"),s("code",[t._v("cin")]),t._v(" 可以跳过这些空白字符读入你需要的数据。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 101\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("101\n")])])]),s("p",[t._v("此外，"),s("code",[t._v("cin")]),t._v(" 在读入数据时，会将尽可能多的符合条件的数据读入到变量中。举例而言，若我们的输入文本为 "),s("code",[t._v("1001sa as")]),t._v("，那么通过 "),s("code",[t._v("cin")]),t._v(" 将输入文本读入到一个 int 型变量中，将会得到值为 "),s("code",[t._v("1001")]),t._v(" 的变量。如果读入到 string 中，则会得到 "),s("code",[t._v("1001sa")]),t._v("，因为上面提到过 "),s("code",[t._v("cin")]),t._v(" 会忽略空格，故从第一个字符开始直到遇到空格时，"),s("code",[t._v("cin")]),t._v(" 发现没有更多可读入的字符，于是就终止读入，得到结果为 "),s("code",[t._v("1001sa")]),t._v(" 的字符串。总结而言，"),s("code",[t._v("cin")]),t._v(" 读入数据会忽略前导的空白字符，并以空白字符作为一次读入结束的标志。你可以复制下面的代码自己尝试不同的输入进行试验。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1001sa as\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1001sa\n")])])]),s("h2",{attrs:{id:"cin-get-和-getline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cin-get-和-getline"}},[t._v("#")]),t._v(" cin.get 和 getline")]),t._v(" "),s("p",[t._v("忽略空格可以带来一些便利，但有时，我们就是想要保留空格，那应该怎么办呢？C++ 中还有另外两个常用于输入的函数 "),s("code",[t._v("cin.get")]),t._v(" 和 "),s("code",[t._v("getline")]),t._v("。在此，你不需要了解函数的概念，你只需要知道如何使用即可。")]),t._v(" "),s("p",[s("code",[t._v("cin.get")]),t._v(" 每次执行时都会从输入文本中获取单个字符。"),s("code",[t._v("cin.get")]),t._v(" 获取字符后，我们需要用一个变量来保存它，因此，我们可以写出以下的代码。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//cin.get 得到的字符保存到 c 中。")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c is \\\'"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\''")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"And the value is "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" a\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("c is ' '\nAnd the value is 32\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nasdf\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("c is '\n'\nAnd the value is 10\n")])])]),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("拓展内容")]),t._v(" "),s("p",[t._v("此外 "),s("code",[t._v("cin.get")]),t._v(" 还有另外一种使用方法如下；")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我不推荐使用这种方法，首先，在这种用法中 "),s("code",[t._v("cin.get")]),t._v(" 的返回类型是 int 型，将 int 型赋值给 char 型变量会发生类型转换，产生一些意想不到的问题。原因是 "),s("code",[t._v("cin.get")]),t._v(" 不一定总是返回一个符合 char 型范围的值，如 "),s("code",[t._v("cin.get")]),t._v(" 读取 "),s("code",[t._v("EOF")]),t._v(" 时会返回 "),s("code",[t._v("-1")]),t._v("，这时，如果将其赋值给一个 char 变量，再打印输出会得到不可预知的结果。")])]),t._v(" "),s("p",[s("code",[t._v("getline")]),t._v(" 是另外一个常用的输入函数，默认情况下，"),s("code",[t._v("getline")]),t._v(" 会"),s("strong",[t._v("不忽略任何字符地")]),t._v("读入一整行字符串，因此，你需要足够大的类型 string 来存储读入的字符串。使用方法如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getline")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("12345aa  asds\nthis is new line.\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("12345aa  asds\n")])])]),s("p",[s("code",[t._v("getline")]),t._v(" 函数中的第一个参数为 "),s("code",[t._v("cin")]),t._v("，表明其从 "),s("code",[t._v("cin")]),t._v(" 读入，而第二个参数则为用于存储的变量。由于 "),s("code",[t._v("getline")]),t._v(" 读入时没有忽略空格，故后续还需要对得到的字符串进行进一步处理。")]),t._v(" "),s("h2",{attrs:{id:"输入流指针-我读到哪了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入流指针-我读到哪了"}},[t._v("#")]),t._v(" 输入流指针——我读到哪了？")]),t._v(" "),s("p",[t._v("你在打代码的时候，有没有注意到那个闪烁的竖线？你在键盘上敲字时，字符就从那个竖线源源不断地涌现出来。你应该清楚那个竖线的重要作用，它用来指示目前文本输入的位置，故我们把它称为输入光标。同样的，我们的程序在读取输入时，也有类似这样的光标，我们称之为"),s("strong",[t._v("输入流指针")]),t._v("。输入流指针指示了输入的位置，从输入流指针开始往右直到输入结束都是有效的输入部分，而输入流指针左边的数据则是不会被读入的。")]),t._v(" "),s("p",[t._v("举例而言，有一个输入文本为 "),s("code",[t._v("1100stat")]),t._v("，开始的时候我们的输入流指针（用竖线 "),s("code",[t._v("|")]),t._v(" 指示）应该在整个文本的前面，即 "),s("code",[t._v("|1100stat")]),t._v("，此时，使用 "),s("code",[t._v("cin")]),t._v(" 读入一个 int 变量，则 1100 将会被读走，输入流指针往后移动，变为 "),s("code",[t._v("1100|stat")]),t._v("，这时继续使用 "),s("code",[t._v("cin")]),t._v(" 读入一个 string 变量，于是输入流指针后移，变为 "),s("code",[t._v("1100stat|")]),t._v("。这个过程很简单，是吧？")]),t._v(" "),s("p",[t._v("再来更加复杂的例子。输入文本为 "),s("code",[t._v("\\nabc 123")]),t._v("，使用 "),s("code",[t._v("cin")]),t._v(" 读入一个 string 变量，那么流输入指针将移动到 "),s("code",[t._v("\\nabc| 123")]),t._v("，但我们读入的字符串实际为 "),s("code",[t._v("abc")]),t._v("，原因就如我之前所说，"),s("code",[t._v("cin")]),t._v(" 读入数据时会忽略前导的空白字符，同时也会以空白字符作为读入结束的标志。这时流输入指针移动到了空格之前，那么假如这时我们用 "),s("code",[t._v("cin.get")]),t._v(" 读入一个字符，那么应该会得到空格。下面的程序可以验证我们的想法。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value of ch is \\\'"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" ch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\''")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ASCII value is "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" \nabc 123\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("value of ch is ' '\nASCII value is 32\n")])])]),s("p",[t._v("从上面的例子可以看到，使用 "),s("code",[t._v("cin.get")]),t._v(" 读入字符时，要注意流输入指针的位置，因为 "),s("code",[t._v("cin.get")]),t._v(" "),s("strong",[t._v("不会忽略空白字符")]),t._v("！如果你不注意的话可能会读入一个空白字符，从而影响你程序的后续运行。")]),t._v(" "),s("p",[s("code",[t._v("getline")]),t._v(" 读入时会读入一整行文本，但"),s("strong",[t._v("不会读入换行符")]),t._v("，此外，读入完成后，流输入指针会"),s("strong",[t._v("移动到换行符之后")]),t._v("。以下的程序可以验证 "),s("code",[t._v("getline")]),t._v(" 的读入机制。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getline")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//假定输入是 abcc\\n!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果 ch 读入的值是 \\n，说明 getline 读入完成后，流输入指针会移动到换行符之前，")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//否则如果读入的值是 !，说明 getline 读入完成后，流输入指针会移动到换行符之后。")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value of ch is \\\'"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" ch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\''")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ASCII value is "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("abcc\n!\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("value of ch is '!'\nASCII value is 33\n")])])]),s("h2",{attrs:{id:"读入了一个错误的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读入了一个错误的类型"}},[t._v("#")]),t._v(" 读入了一个错误的类型")]),t._v(" "),s("h3",{attrs:{id:"错误读取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误读取"}},[t._v("#")]),t._v(" 错误读取")]),t._v(" "),s("p",[t._v("你有没有想过，如果 "),s("code",[t._v("cin")]),t._v(" 读入了一个错误的数据会发生什么？比如，如果我把 "),s("code",[t._v("a")]),t._v(" 读入到一个 "),s("code",[t._v("int")]),t._v(" 型的变量中。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果我们的"),s("strong",[t._v("输入为：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0\n")])])]),s("p",[t._v("再多来几组测试，"),s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("b\n+\n?\n=\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0\n0\n0\n0\n")])])]),s("p",[t._v("可以看到，不管我们输入什么，上面的程序始终输出 "),s("code",[t._v("0")]),t._v("。")]),t._v(" "),s("p",[t._v("如果在读入多个数据时出错呢？")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("' '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a 1\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0 -1\n")])])]),s("p",[t._v("显然，"),s("code",[t._v("a")]),t._v(" 读入了错误的数据后被赋予了值为 "),s("code",[t._v("0")]),t._v("，而 "),s("code",[t._v("b")]),t._v(" 似乎根本没有被读入。")]),t._v(" "),s("p",[t._v("假如我们尝试把错误的数据“读走”。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("' '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of c is: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a 1\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0 -1\nValue of c is: *\n")])])]),s("p",[t._v("看来和我们想的不一样，错误的数据并没有被读入到 "),s("code",[t._v("c")]),t._v(" 中。")]),t._v(" "),s("h3",{attrs:{id:"cin-fail"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cin-fail"}},[t._v("#")]),t._v(" cin.fail")]),t._v(" "),s("p",[s("code",[t._v("cin")]),t._v(" 自身保存了一个 bool 型数据，用于指示我们读入是否出现了问题。通过使用 "),s("code",[t._v("cin.fail()")]),t._v(" 来得到这个数据，注意，不要漏了括号。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Is there a read error? "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" boolalpha "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//boolalpha 可以将 bool 型变量输出为 true 或 false，如果不加上 boolalpha 则只会输出 1 或 0。")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a\n1\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0\nIs there a read error? true\n1\nIs there a read error? false\n")])])]),s("h3",{attrs:{id:"文件结束符-eof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件结束符-eof"}},[t._v("#")]),t._v(" 文件结束符 EOF")]),t._v(" "),s("p",[t._v("EOF（End Of File）就是文件结束的意思，你可以把它想象成一个特殊的字符，并且它会紧跟在文件的末尾之后。因此 EOF 可以用来表示我们在读入文件时是否达到文件的末尾。")]),t._v(" "),s("p",[t._v("你是否好奇将 EOF 读入一个变量中会发生什么？我们用下面的程序实验以下。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of a is \\\'"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\''")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ASCII value is "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Is there a read error? "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" boolalpha "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Value of a is ''\nASCII value is 0\nIs there a read error? true\n")])])]),s("p",[t._v("在此，我们的输入为空，在程序终端中，想要结束输入，可以通过在一行的行首输入 "),s("code",[t._v("EOF")]),t._v(" 字符来实现，"),s("code",[t._v("EOF")]),t._v(" 在 "),s("code",[t._v("Windows")]),t._v(" 系统下可以按 "),s("code",[t._v("Ctrl+Z")]),t._v(" 键输入，在 MacOS 或 Linux 系统下按 "),s("code",[t._v("Ctrl+D")]),t._v(" 输入。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(344),alt:"1"}})]),t._v(" "),s("p",[t._v("上面的程序中的输出告诉我们读入 "),s("code",[t._v("EOF")]),t._v(" 时失败了。在你的 IDE 里打出 "),s("code",[t._v("EOF")]),t._v("（不是 "),s("code",[t._v("Ctrl+Z")]),t._v("），然后将鼠标悬浮到它上面，你就可以看到 "),s("code",[t._v("EOF")]),t._v(" 字符的定义。在我的电脑上，它被定义为值为 "),s("code",[t._v("-1")]),t._v(" 的 int 型的量。显然，"),s("code",[t._v("EOF")]),t._v(" 并不是 ASCII 码内的任何一个字符，因此，如果你试图将 "),s("code",[t._v("EOF")]),t._v(" 读入到 char 中会发生读入错误。不仅仅是 char，EOF 读入到任何类型中都会发生读入错误。反之，在没有任何输入结束的提示符，且输入的数据长度不定时，我们可以利用读入错误来判断我们的输入是否已经结束了。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("问题")]),t._v(" "),s("p",[t._v("输入一些英文单词，单词间使用空格间隔开，请你统计输入单词的数量")]),t._v(" "),s("p",[s("strong",[t._v("示例输入：")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Artificer is capable of blow up other creatures\n")])])]),s("p",[s("strong",[t._v("示例输出：")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("首先，我们使用 "),s("code",[t._v("cin")]),t._v(" 读入一个 string，然后检查 "),s("code",[t._v("cin.fail")]),t._v(" 的状态，如果读入成功，则答案计数加 "),s("code",[t._v("1")]),t._v("，然后继续循环读入下一个 string，再次判断 "),s("code",[t._v("cin.fail")]),t._v(" 的状态。如果发生读入错误，则退出循环，输出结果。")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("查看参考代码")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"格式化输入输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#格式化输入输出"}},[t._v("#")]),t._v(" 格式化输入输出")]),t._v(" "),s("h3",{attrs:{id:"输出整数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输出整数"}},[t._v("#")]),t._v(" 输出整数")]),t._v(" "),s("p",[t._v("在输出整数时，我们可以指定其以八进制、十进制或是十六进制输出。例如")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" oct "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("88")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//以八进制输出。")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("130\n")])])]),s("p",[t._v("上面代码中的 "),s("code",[t._v("oct")]),t._v(" 称为操作符，"),s("code",[t._v("<< oct")]),t._v(" 并不会输出任何实际内容，它的作用是设定输出的格式。C++ 中提供了三种操作符用于整数的输出。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("操作符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("oct")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("八进制（octal）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("dec")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("十进制（decimal）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("hex")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("十六进制（hexadecimal）")])])])]),t._v(" "),s("p",[s("strong",[t._v("样例：")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" oct "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" dec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("87")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" hex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("22\n87\n44c\n")])])]),s("p",[t._v("注意，设定输出进制的效果是持久的。也就是说，"),s("code",[t._v("cout << hex << 10 << ' ' << 32")]),t._v(" 的输出结果为 "),s("code",[t._v("A 20")]),t._v("。操作符会持续影响后面的输出。此外，如果你想让输出的整数带有进制前缀，可以使用 "),s("code",[t._v("showbase")]),t._v(" 操作符。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//showbase 和 hex 的顺序没有特别要求，只需保证在输出前即可实现格式化输出。其他的操作符也是同理。")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" showbase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" hex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0x44c\n")])])]),s("p",[t._v("如果你厌倦了显示进制前缀，则使用 "),s("code",[t._v("noshowbase")]),t._v(" 即可。")]),t._v(" "),s("h3",{attrs:{id:"输入整数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入整数"}},[t._v("#")]),t._v(" 输入整数")]),t._v(" "),s("p",[t._v("除了输出，"),s("code",[t._v("oct")]),t._v("，"),s("code",[t._v("dec")]),t._v(" 和 "),s("code",[t._v("hex")]),t._v(" 还允许我们使用特定进制输入整数，默认情况下以十进制输入整数。只需在 "),s("code",[t._v("cin")]),t._v(" 中设置这些操作符即可。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" oct "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" hex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("' '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("' '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1234 2322 4d2\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1234 1234 1234\n")])])]),s("h3",{attrs:{id:"输出浮点数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输出浮点数"}},[t._v("#")]),t._v(" 输出浮点数")]),t._v(" "),s("p",[t._v("适用于浮点数的操作符如下表。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("操作符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("fixed")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("定点表示")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("scientific")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("科学计数法表示")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("hexfloat")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("十六进制浮点数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("defaultfloat")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("默认格式")])])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" fixed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123.45678")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" scientific "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123.45678")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" hexfloat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123.45678")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不需要掌握")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("123.456780\n1.234568e+02\n0x1.edd3be22e5de1p+6 \n")])])]),s("p",[t._v("默认格式下，"),s("code",[t._v("cout")]),t._v(" 会在 "),s("code",[t._v("fixed")]),t._v(" 和 "),s("code",[t._v("scientific")]),t._v(" 间自动选择一种合适的格式输出浮点数。")]),t._v(" "),s("h3",{attrs:{id:"浮点数的精度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点数的精度"}},[t._v("#")]),t._v(" 浮点数的精度")]),t._v(" "),s("p",[t._v("要想指定浮点数输出的精度，需要使用 "),s("code",[t._v("setprecision")]),t._v(" 操作符。"),s("code",[t._v("setprecision")]),t._v(" 操作符接受一个整数用于指定输出的精度。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setprecision")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.3456789")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setprecision")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.3456789")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("12\n12.3457\n")])])]),s("p",[t._v("从上可以看到，精度的含义是“有效数字”。但如果我们将浮点数指定为 fixed 或 scientific 输出时，精度的含义会变化为“保留的小数点后的位数”。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" fixed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setprecision")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.3456789")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" scientific "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setprecision")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.3456789")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("12.35\n1.234568e+01\n")])])]),s("p",[t._v("浮点数的精度的定义如下表：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("输出格式")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("精度意义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("defaultfloat")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("数字的个数（有效数字）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("fixed")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("小数点后的数字个数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("scientific")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("小数点后的数字个数")])])])]),t._v(" "),s("p",[t._v("此外，默认情况下，浮点数的精度为 "),s("code",[t._v("6")]),t._v("。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[s("code",[t._v("setprecision")]),t._v(" 包含在头文件 "),s("code",[t._v("iomanip")]),t._v(" 中，使用时需要引入头文件 "),s("code",[t._v("iomanip")]),t._v("。此外，部分格式化相关的操作符也包含在 "),s("code",[t._v("iomanip")]),t._v(" 中，如果你想要使用格式化操作符，建议引入此头文件。")])]),t._v(" "),s("h3",{attrs:{id:"显示浮点数小数部分后导-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显示浮点数小数部分后导-0"}},[t._v("#")]),t._v(" 显示浮点数小数部分后导 0")]),t._v(" "),s("p",[t._v("浮点数以 "),s("code",[t._v("defaultfloat")]),t._v(" 格式输出时，会忽略小数部分的后导 "),s("code",[t._v("0")]),t._v("。如输出 "),s("code",[t._v("1.0")]),t._v(" 时会变为 "),s("code",[t._v("1")]),t._v("，输出 "),s("code",[t._v("2.2300")]),t._v(" 时会变为 "),s("code",[t._v("2.23")]),t._v("。要想显示后导 "),s("code",[t._v("0")]),t._v("，可以使用 "),s("code",[t._v("showpoint")]),t._v(" 操作符。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" showpoint "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\n1.00000\n")])])]),s("p",[t._v("输出的后导 "),s("code",[t._v("0")]),t._v(" 的个数受到 "),s("code",[t._v("setprecision")]),t._v(" 的影响。如果你不想再显示后导 "),s("code",[t._v("0")]),t._v("，可以使用 "),s("code",[t._v("noshowpoint")]),t._v(" 操作符。")]),t._v(" "),s("p",[t._v("由于以 "),s("code",[t._v("fixed")]),t._v(" 和 "),s("code",[t._v("scientific")]),t._v(" 格式输出的浮点数受精度的影响，会始终显示后导 "),s("code",[t._v("0")]),t._v("，故 "),s("code",[t._v("showpoint")]),t._v(" 操作符对其不起作用。")]),t._v(" "),s("h3",{attrs:{id:"域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#域"}},[t._v("#")]),t._v(" 域")]),t._v(" "),s("p",[t._v("setw 操作符可以指定输出时的字符宽度（输出字符不足时用空格补齐）。其接受一个整数用于指定宽度。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"********|********"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.02")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"\\'a\\'\"")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"char"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"hello\\""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("********|********\n    1.02|  double\n      35|     int\n     'a'|    char\n \"hello\"|  string\n")])])]),s("p",[t._v("当输出的数据的长度比 "),s("code",[t._v("setw")]),t._v(" 设置的宽度要长时，"),s("code",[t._v("setw")]),t._v(" 不会起作用。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456789"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("123456789\n")])])]),s("p",[t._v("默认情况下，setw 的输出采用右对齐的方式。如果你想切换对齐方式，可以使用 "),s("code",[t._v("left")]),t._v("（左对齐）或 "),s("code",[t._v("right")]),t._v("（右对齐）操作符。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"********|********"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.02")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"\\'a\\'\"")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"char"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"hello\\""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("********|********\n1.02    |double\n35      |int\n'a'     |char\n\"hello\" |string\n")])])]),s("p",[s("code",[t._v("setfill")]),t._v(" 操作符还可以指定 "),s("code",[t._v("setw")]),t._v(" 用于填充的字符。用于填充的字符需要传入 "),s("code",[t._v("setfill")]),t._v(" 中。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"********|********"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setfill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'-'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.02")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"\\'a\\'\"")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"char"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"hello\\""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'|'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("********|********\n----1.02|--double\n------35|-----int\n-----'a'|----char\n-\"hello\"|--string\n")])])]),s("h3",{attrs:{id:"其他格式化操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他格式化操作符"}},[t._v("#")]),t._v(" 其他格式化操作符")]),t._v(" "),s("p",[t._v("下面是一些适用于整数和浮点数的格式化操作符。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("操作符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("showpos")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("显示数字的正号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("noshowpos")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("默认，不显示数字的正号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uppercase")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("输出进制前缀或者科学计数法中的底数时使用大写字母")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("nouppercase")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("默认，使用小写字母")])])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" showpos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" uppercase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" scientific "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" uppercase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" hex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8381")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("+1\n+1.230000E+00\n20BD\n")])])]),s("h2",{attrs:{id:"c-风格的输入输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-风格的输入输出"}},[t._v("#")]),t._v(" C 风格的输入输出")]),t._v(" "),s("h3",{attrs:{id:"scanf-的返回值和读入报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scanf-的返回值和读入报错"}},[t._v("#")]),t._v(" scanf 的返回值和读入报错")]),t._v(" "),s("p",[t._v("scanf 的函数原型为：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这意味着，"),s("code",[t._v("scanf")]),t._v(" 是一个返回类型为 int 的函数。其返回值表示 "),s("code",[t._v("scanf")]),t._v("成功读入的变量的个数，如果读入第一个变量之前就发生读入失败（此时通常表现为读到了 "),s("code",[t._v("EOF")]),t._v("），那么将会返回 "),s("code",[t._v("EOF")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Return value of scanf is %d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入 1：\n1 1\n输入 2：\na 1\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输出 1：\nReturn value of scanf is 2\n输出 2：\nReturn value of scanf is 0\n")])])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Return value of scanf is %d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-1\n")])])]),s("p",[t._v("利用 "),s("code",[t._v("scanf")]),t._v(" 的返回值，可以实现长度不定的数据的读入。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EOF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 32 3 -8 3\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("31\n")])])]),s("h3",{attrs:{id:"格式化字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#格式化字符串"}},[t._v("#")]),t._v(" 格式化字符串")]),t._v(" "),s("p",[t._v("scanf 的接收的第一个参数"),s("strong",[t._v("格式化字符串")]),t._v("可用来指示如何进行输入。格式化字符串由三部分组成：")]),t._v(" "),s("ol",[s("li",[t._v("非空白字符")]),t._v(" "),s("li",[t._v("空白字符")]),t._v(" "),s("li",[t._v("格式字符")])]),t._v(" "),s("p",[t._v("在读入时，scanf 会将格式化字符的非空白字符与输入文本进行比较，若他们无法匹配，读入会失败。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Input number:%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Read state: %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of a is %d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入 1：\n10\n输入 2：\ninput number:10\n输入 3：\nInput number:10\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输出 1：\nRead state: 0\nValue of a is -1\n输出 2：\nRead state: 0\nValue of a is -1\n输出 3：\nRead state: 1\nValue of a is 10\n")])])]),s("p",[t._v("格式化字符串中的空白字符会导致 scanf 忽略掉输入中连续的空白字符。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%c%c %c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"a is \\'%c\\'\\nASCII value is %d\\n\"")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"b is \\'%c\\'\\nASCII value is %d\\n\"")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"c is \\'%c\\'\\nASCII value is %d\\n\"")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("输入：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a      1\n")])])]),s("p",[s("strong",[t._v("输出：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a is 'a'\nASCII value is 97\nb is ' '\nASCII value is 32\nc is '1'\nASCII value is 49\n")])])]),s("p",[t._v("格式字符，如 "),s("code",[t._v("%d")]),t._v("，"),s("code",[t._v("%c")]),t._v("，"),s("code",[t._v("%f")]),t._v(" 等用于说明输入的方式。想必你已经掌握了，在此我不再介绍了。")])])}),[],!1,null,null,null);s.default=e.exports}}]);