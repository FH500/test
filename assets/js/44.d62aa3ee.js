(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{404:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),a("h2",{attrs:{id:"指针是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针是什么"}},[t._v("#")]),t._v(" 指针是什么")]),t._v(" "),a("p",[a("strong",[t._v("本质上 指针是C&C++中的一种复合变量类型")])]),t._v(" "),a("ul",[a("li",[t._v("这说明指针本身是一个变量，可以进行读写等操作")]),t._v(" "),a("li",[t._v("指针内存放的是对象的地址")]),t._v(" "),a("li",[t._v("由于指针本身也是对象，所以存在指针的指针、指针的指针的指针、指针的指针的指针的指针……")])]),t._v(" "),a("h2",{attrs:{id:"解引用符和取地址符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解引用符和取地址符"}},[t._v("#")]),t._v(" 解引用符和取地址符")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("*")]),t._v(" 解引用符号\n用于对一个指针来进行解引用，即 "),a("code",[t._v("*a")]),t._v(" 会返回 "),a("code",[t._v("a")]),t._v(" 指针所存放的地址对应内存上的值")]),t._v(" "),a("li",[a("code",[t._v("&")]),t._v(" 取地址符号\n对任意一个对象进行取地址操作， "),a("code",[t._v("&a")]),t._v(" 会返回 "),a("code",[t._v("a")]),t._v(" 的地址")])]),t._v(" "),a("h2",{attrs:{id:"指针的声明、定义以及简单使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针的声明、定义以及简单使用"}},[t._v("#")]),t._v(" 指针的声明、定义以及简单使用")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("   \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//declare a pointer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myPointer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//pay attention to the initialization of a pointer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//declare a variable")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" myVariable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//assign the address of the variable to the pointer")]),t._v("\n    myPointer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myVariable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//visit the value of the variable through the pointer")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myPointer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//visit the address of the variable")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myVariable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//visit the address of the pointer")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myPointer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("指针的初始化")]),t._v(" "),a("p",[t._v("为防止指针在没有初始化的情况下成为野指针，请一定要对指针进行初始化，以避免程序出错。一般来说习惯将指针初始化为空指针 "),a("code",[t._v("NULL")]),t._v(" 。此外 C++ 中还有 "),a("code",[t._v("nullptr")]),t._v(" 来表示空指针")])]),t._v(" "),a("h2",{attrs:{id:"指针的指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针的指针"}},[t._v("#")]),t._v(" 指针的指针")]),t._v(" "),a("p",[t._v("我们可以定义指针的指针，在给指针的指针赋值时，一定要注意类型的匹配")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//declare a pointer to a pointer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myPointer2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//assign the address of the pointer to the pointer to the pointer")]),t._v("\n    myPointer2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myPointer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a wrong attempt: assign the address of the variable to the pointer to the pointer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//myPointer2 = &myVariable;")]),t._v("\n")])])]),a("h2",{attrs:{id:"常量指针、指针常量、指向常量的指针常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量指针、指针常量、指向常量的指针常量"}},[t._v("#")]),t._v(" 常量指针、指针常量、指向常量的指针常量")]),t._v(" "),a("p",[t._v("在不同位置， "),a("code",[t._v("const")]),t._v(" 的作用不同")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//declare a pointer to a constant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myPointer3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//assign the address of the variable to the pointer to a constant")]),t._v("\n    myPointer3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myVariable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//visit the value of the variable through the pointer to a constant")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myPointer3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a wrong attempt: change the value of the variable through the pointer to a constant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*myPointer3 = 20;")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//declare a constant pointer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myPointer4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myVariable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a wrong attempt: assign the address of the variable to the constant pointer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//myPointer4 = NULL;")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//visit the value of the variable through the constant pointer")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myPointer4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//change the value of the variable through the constant pointer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myPointer4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//declare a constant pointer to a constant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myPointer5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myVariable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a wrong attempt: assign the address of the variable to the constant pointer to a constant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//myPointer5 = NULL;")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a wrong attempt: change the value of the variable through the constant pointer to a constant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*myPointer5 = 20;")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//visit the value of the variable through the constant pointer to a constant")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" myPointer5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);